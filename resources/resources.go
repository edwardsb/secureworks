// Code generated by go-bindata. DO NOT EDIT.
// sources:
// schemas/eventrequest.json (831B)

package resources

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemasEventrequestJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x52\x4d\x8b\xdb\x30\x10\xbd\xe7\x57\x0c\x6a\x8f\x49\x9d\x26\xd9\x75\xea\x5b\xa1\x3d\x04\x0a\x5d\x0a\x3d\x95\x12\x54\x79\x6c\xcf\x12\x7d\xac\x34\x4a\x1d\xca\xfe\xf7\x62\xcb\x1b\xd7\x18\x52\xf6\xfa\xe6\xcd\xfb\xd0\xe8\xcf\x02\x40\xbc\x0d\xaa\x41\x2d\x45\x01\xa2\x61\x76\x45\x96\x3d\x06\x6b\x56\x09\x7d\x67\x7d\x9d\x95\x5e\x56\xbc\x5a\xdf\x67\x09\x7b\x23\x96\xdd\x1e\x13\x9f\xb0\xdb\xfa\x7c\x46\xc3\xf0\x0d\x9f\x22\x06\x4e\xb3\x12\x83\xf2\xe4\x98\xac\x19\x19\x3e\x31\xc0\xc9\xcb\xc9\xca\x12\x82\x43\x45\x15\x29\xd9\xd3\x92\xe6\xc5\xf5\x92\xf6\xd7\x23\xaa\x41\xcb\x79\xeb\xd0\x33\x61\x10\x05\x74\x89\x01\x44\x0c\xe8\x8d\xd4\x28\xe0\x05\x9a\x9b\x7e\x1f\x38\x50\x59\x0f\xdc\x50\x00\xec\x63\x28\x6b\x18\xdb\x24\xde\xef\xbd\x98\x06\xf6\x64\xea\x11\xd7\x64\xbe\xa0\xa9\xb9\x11\x05\xbc\xef\xc1\xe7\x34\x13\xbd\xd0\x31\x46\x2a\xc5\x0d\x7f\x43\x4f\x11\xaf\xad\x0f\x9f\xfe\xef\x58\x59\xaf\x25\x77\x93\x5e\x7b\xe2\x49\xee\x28\xcb\xd2\x63\x08\x37\x3c\xbf\x7a\xaa\xc9\x48\x26\x53\xc3\xe1\x01\x3e\xa6\x05\x38\x3c\x9c\x77\x60\xcd\xe9\xf2\x9a\x08\xe4\xce\xbb\x69\x84\x68\xa8\x3d\x32\x69\x0c\x2c\xb5\xbb\x5d\xbd\x85\x2b\x11\x6c\x05\xbf\x1b\x34\xff\x1e\xc1\x2a\x15\xbd\xc7\x72\x1e\x88\x0c\x63\x8d\x7e\x72\x06\xd2\x51\x8b\x02\x56\x1f\x36\x9b\xed\x36\xdf\xac\xb7\xf7\xfb\xbb\x5d\x9e\xdf\xed\xd7\xfb\x91\x26\xdb\x81\x36\x67\xe5\xa9\xc6\x62\xa8\x22\xba\x9b\x50\xe7\x5e\xc0\x8f\xf1\x2f\x2d\x27\x87\x5d\x4e\x9e\x7c\x39\x6b\xff\x73\xf1\xfc\x37\x00\x00\xff\xff\xc9\x56\xc3\xba\x3f\x03\x00\x00")

func schemasEventrequestJsonBytes() ([]byte, error) {
	return bindataRead(
		_schemasEventrequestJson,
		"schemas/eventrequest.json",
	)
}

func schemasEventrequestJson() (*asset, error) {
	bytes, err := schemasEventrequestJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schemas/eventrequest.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x4c, 0xe8, 0x82, 0x9e, 0xac, 0x88, 0xaa, 0xae, 0x59, 0x61, 0xa3, 0x23, 0x10, 0x3f, 0x6f, 0x7c, 0x46, 0xc1, 0x90, 0x3b, 0x16, 0x7d, 0x2, 0x8e, 0x9f, 0xf0, 0x81, 0x43, 0xde, 0xfa, 0x47, 0x30}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schemas/eventrequest.json": schemasEventrequestJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schemas": &bintree{nil, map[string]*bintree{
		"eventrequest.json": &bintree{schemasEventrequestJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
